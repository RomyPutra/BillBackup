// <auto-generated />
using System;
using Billboard360.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Billboard360.DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Bank", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BankName");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Kode");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("LogoBank");

                    b.HasKey("ID");

                    b.ToTable("Bank");

                    b.HasData(
                        new
                        {
                            ID = new Guid("8a831fae-00e9-46aa-8bc5-b749b49ee60d"),
                            BankName = "BCA",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Kode = "BCA",
                            LogoBank = ""
                        },
                        new
                        {
                            ID = new Guid("0a30f0ef-27aa-476a-8207-b9fe4cb5e8f0"),
                            BankName = "MANDIRI",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Kode = "MNDR",
                            LogoBank = ""
                        },
                        new
                        {
                            ID = new Guid("f8678e27-ea39-4fe4-bd64-a01f1adcdd1c"),
                            BankName = "CIMB NIAGA",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Kode = "CMB",
                            LogoBank = ""
                        },
                        new
                        {
                            ID = new Guid("d79111e2-edf9-4606-90b0-6e44ca690472"),
                            BankName = "BRI",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Kode = "BRI",
                            LogoBank = ""
                        },
                        new
                        {
                            ID = new Guid("eb0ac480-e1ba-4468-8ba1-c7e9f59083ee"),
                            BankName = "PANIN",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Kode = "PNN",
                            LogoBank = ""
                        },
                        new
                        {
                            ID = new Guid("986ab193-fa3d-407f-9ec1-e12b3c185fcd"),
                            BankName = "BNI",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Kode = "BNI",
                            LogoBank = ""
                        },
                        new
                        {
                            ID = new Guid("94f483d4-8836-48ef-b24e-29e96aa9c3ae"),
                            BankName = "JENIUS",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Kode = "JNS",
                            LogoBank = ""
                        });
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.BillboardType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Kode");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("BillboardType");

                    b.HasData(
                        new
                        {
                            ID = new Guid("cc0277f1-f543-4c1b-a0a2-766a03916faa"),
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kode = "BBD",
                            Type = "Billboard"
                        },
                        new
                        {
                            ID = new Guid("70c8454a-fcce-45a7-a93a-381a2af6b06b"),
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kode = "MGT",
                            Type = "MEGATRON"
                        },
                        new
                        {
                            ID = new Guid("31f5da4e-c744-4fb9-9430-05add9aadbeb"),
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kode = "NBX",
                            Type = "NEON BOX"
                        },
                        new
                        {
                            ID = new Guid("32c09574-1216-44d1-9ed0-4ca651183b7d"),
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kode = "NSG",
                            Type = "NEON SIGN, LETTER & KIOS DISPLAY"
                        },
                        new
                        {
                            ID = new Guid("9ddc454e-8191-4c7a-ad2e-8ce0a48a5c20"),
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kode = "MCD",
                            Type = "MERCHANDISE"
                        },
                        new
                        {
                            ID = new Guid("4e9e8b5d-f24d-43f1-a65f-fa309bdc57a8"),
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kode = "ALM",
                            Type = "ALTERNATIVE MEDIA"
                        });
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Book", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookNo");

                    b.Property<Guid>("CompanyID");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<Guid?>("PaymentID");

                    b.Property<Guid?>("SiteItemID");

                    b.Property<int>("StatusApproval");

                    b.Property<Guid>("UserID");

                    b.Property<bool>("isNotified");

                    b.HasKey("ID");

                    b.HasIndex("SiteItemID");

                    b.HasIndex("UserID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.BookDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookID");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<double>("FinalPrice");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Note");

                    b.Property<double>("Price");

                    b.Property<Guid>("PriceID");

                    b.Property<int>("Qty");

                    b.Property<Guid>("SiteID");

                    b.Property<Guid>("SiteItemID");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusApprovalPerBillboard");

                    b.Property<double>("TotalPerItem");

                    b.HasKey("ID");

                    b.HasIndex("BookID");

                    b.ToTable("BookDetail");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Cart", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BookID");

                    b.Property<Guid>("CompanyID");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<double>("Price");

                    b.Property<Guid>("PriceID");

                    b.Property<int>("Qty");

                    b.Property<Guid>("SiteID");

                    b.Property<Guid>("SiteItemID");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusApproval");

                    b.Property<double>("TotalPerItem");

                    b.Property<Guid>("UserID");

                    b.Property<bool>("isNotified");

                    b.HasKey("ID");

                    b.HasIndex("SiteItemID");

                    b.HasIndex("UserID");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.City", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityName");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("Kode");

                    b.Property<int>("KodeProvinsi");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<Guid>("ProvinceID");

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Company", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alamat");

                    b.Property<string>("Alias");

                    b.Property<string>("CompanyName");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email");

                    b.Property<string>("Kategory");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("NPWP");

                    b.Property<string>("Note");

                    b.Property<Guid>("UserID");

                    b.Property<string>("Website");

                    b.Property<bool>("isMain");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Compare", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<Guid>("SiteID");

                    b.Property<Guid>("SiteItemID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("SiteID");

                    b.ToTable("Compare");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.ContactPerson", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyID");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email");

                    b.Property<string>("Jabatan");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("ContactPerson");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.LogActivity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("KodeLogger");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Message");

                    b.HasKey("ID");

                    b.ToTable("LogActivity");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.LogForgotPassword", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("DateExpired");

                    b.Property<DateTime>("DateRequest");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsUsed");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.ToTable("LogForgotPassword");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.LogRateSite", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<double>("RateScore");

                    b.Property<Guid>("SiteID");

                    b.Property<Guid>("SiteItemID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("LogRateSite");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.MidTransLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Approval_Code");

                    b.Property<string>("BankName");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Currency");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Gross_Amount");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Merchant_ID");

                    b.Property<int>("MidTransStatus");

                    b.Property<string>("MidTransTransactionType");

                    b.Property<int>("ModeTransaction");

                    b.Property<string>("Order_ID");

                    b.Property<Guid>("PaymentID");

                    b.Property<string>("Payment_Type");

                    b.Property<string>("Signature_Key");

                    b.Property<string>("Status_Code");

                    b.Property<string>("Status_Message");

                    b.Property<string>("Transaction_ID");

                    b.Property<string>("Transaction_Status");

                    b.Property<DateTime>("Transaction_Time");

                    b.Property<string>("VANumber");

                    b.HasKey("ID");

                    b.ToTable("MidTransLog");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Payment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BookID");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<double>("Diskon");

                    b.Property<string>("InvoiceNo");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<int>("PPNProsen");

                    b.Property<int>("PaymentType");

                    b.Property<double>("SubTotalPrice");

                    b.Property<double>("TotalPaid");

                    b.Property<double>("TotalPrice");

                    b.Property<Guid>("UserID");

                    b.Property<bool>("isLunas");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Province", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int>("Kode");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Provinsi");

                    b.HasKey("ID");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Report", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Desc");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("ReportNo");

                    b.Property<Guid>("SiteID");

                    b.Property<Guid>("SiteItemID");

                    b.Property<Guid>("UserID");

                    b.Property<bool>("isToSPV");

                    b.HasKey("ID");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.ReportDocument", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("PathFile");

                    b.Property<Guid>("ReportID");

                    b.HasKey("ID");

                    b.ToTable("ReportImage");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("ID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            ID = new Guid("b9c78ba1-f5e7-48cf-ae17-d0c859365905"),
                            ConcurrencyStamp = "",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ADM",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            ID = new Guid("a7e4d5e0-e709-4612-89df-88fd2146cd75"),
                            ConcurrencyStamp = "",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SPV",
                            NormalizedName = "Supervisor"
                        },
                        new
                        {
                            ID = new Guid("3d526bf5-93bb-4c16-b2b9-39e1be9e5207"),
                            ConcurrencyStamp = "",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MDB",
                            NormalizedName = "Media Buyer"
                        },
                        new
                        {
                            ID = new Guid("86d43cc3-f6e0-4312-86c6-b6879b9eae87"),
                            ConcurrencyStamp = "",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MDO",
                            NormalizedName = "Media Owner"
                        });
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.SP_GetTitikLokasiWithDistance", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AdaKontruksi");

                    b.Property<string>("Address");

                    b.Property<string>("AddressReal");

                    b.Property<Guid>("AdvTypeID");

                    b.Property<string>("Cabang");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<double>("Distance");

                    b.Property<string>("HorV");

                    b.Property<string>("KelasJalan");

                    b.Property<string>("KodeFile");

                    b.Property<string>("Kota");

                    b.Property<string>("Lampu");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("NoBillboard");

                    b.Property<Guid>("OwnerByUserID");

                    b.Property<string>("PIC");

                    b.Property<string>("Provinsi");

                    b.Property<string>("Pulau");

                    b.Property<double>("RateScoreAverage");

                    b.Property<double>("RateScoreTotal");

                    b.Property<int>("Status");

                    b.Property<double>("Tinggi");

                    b.Property<int>("TotalView");

                    b.Property<int>("TransaksiCount");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("SP_GetTitikLokasiWithDistance");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.TitikLokasi", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AdaKontruksi");

                    b.Property<string>("Address");

                    b.Property<string>("AddressReal");

                    b.Property<Guid>("AdvTypeID");

                    b.Property<string>("Cabang");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("HorV");

                    b.Property<string>("KelasJalan");

                    b.Property<string>("KodeFile");

                    b.Property<string>("Kota");

                    b.Property<string>("Lampu");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("NoBillboard");

                    b.Property<Guid>("OwnerByUserID");

                    b.Property<string>("PIC");

                    b.Property<string>("Provinsi");

                    b.Property<string>("Pulau");

                    b.Property<double>("RateScoreAverage");

                    b.Property<double>("RateScoreTotal");

                    b.Property<int>("Status");

                    b.Property<double>("Tinggi");

                    b.Property<int>("TotalView");

                    b.Property<int>("TransaksiCount");

                    b.Property<string>("Type");

                    b.HasKey("ID");

                    b.ToTable("TitikLokasi");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.TitikLokasiDetail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArahLokasi");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Keterangan");

                    b.Property<string>("KodeArahLokasi");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<double>("Lebar");

                    b.Property<double>("Panjang");

                    b.Property<Guid>("TitikLokasiID");

                    b.HasKey("ID");

                    b.HasIndex("TitikLokasiID");

                    b.ToTable("TitikLokasiDetail");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.TitikLokasiImage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("IsThumbnail");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("PathImage");

                    b.Property<Guid>("TitikLokasiDetailID");

                    b.Property<Guid>("TitikLokasiID");

                    b.HasKey("ID");

                    b.HasIndex("TitikLokasiDetailID");

                    b.ToTable("TitikLokasiImage");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.TitikLokasiPrice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Dasar");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<double>("HargaAkhir");

                    b.Property<double>("HargaAwal");

                    b.Property<double>("Kelipatan");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<string>("MinimDasar");

                    b.Property<int>("MinimOrder");

                    b.Property<Guid>("TitikLokasiDetailID");

                    b.Property<Guid>("TitikLokasiID");

                    b.HasKey("ID");

                    b.HasIndex("TitikLokasiDetailID");

                    b.ToTable("TitikLokasiPrice");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<bool>("LockOutEnabled");

                    b.Property<DateTime>("LockOutEnd");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("SignInToMobile");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = new Guid("3e6b87ef-6bc6-4a96-a105-7a2fec6ec3a1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "Admin",
                            LockOutEnabled = true,
                            LockOutEnd = new DateTime(2020, 4, 22, 22, 28, 38, 330, DateTimeKind.Local).AddTicks(7365),
                            PasswordHash = "81DC9BDB52D04DC20036DBD8313ED055",
                            PhoneNumber = "081123456789",
                            PhoneNumberConfirmed = "081123456789",
                            PhotoUrl = "",
                            SecurityStamp = "",
                            SignInToMobile = true,
                            TwoFactorEnabled = true,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.UserBank", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNumber");

                    b.Property<Guid>("BankID");

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<Guid>("UserID");

                    b.Property<bool>("isSelected");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("UserID");

                    b.ToTable("UserBank");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.UserRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<Guid>("RoleID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            ID = new Guid("48e897ea-c58e-42d7-9af6-ad699988a65f"),
                            CreateByUserID = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleID = new Guid("b9c78ba1-f5e7-48cf-ae17-d0c859365905"),
                            UserID = new Guid("3e6b87ef-6bc6-4a96-a105-7a2fec6ec3a1")
                        });
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.WishList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreateByUserID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid?>("DeletedByUserID");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<Guid?>("LastUpdateByUserID");

                    b.Property<DateTime?>("LastUpdateDate");

                    b.Property<Guid>("SiteID");

                    b.Property<Guid>("SiteItemID");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("SiteItemID");

                    b.HasIndex("UserID");

                    b.ToTable("WishList");
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Book", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.TitikLokasiDetail", "SiteItem")
                        .WithMany()
                        .HasForeignKey("SiteItemID");

                    b.HasOne("Billboard360.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.BookDetail", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Cart", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.TitikLokasiDetail", "SiteItem")
                        .WithMany()
                        .HasForeignKey("SiteItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Billboard360.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.City", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Company", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Compare", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.TitikLokasi", "Site")
                        .WithMany()
                        .HasForeignKey("SiteID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.ContactPerson", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.Payment", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.TitikLokasiDetail", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.TitikLokasi", "TitikLokasi")
                        .WithMany()
                        .HasForeignKey("TitikLokasiID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.TitikLokasiImage", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.TitikLokasiDetail", "TitikLokasiDetail")
                        .WithMany()
                        .HasForeignKey("TitikLokasiDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.TitikLokasiPrice", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.TitikLokasiDetail", "TitikLokasiDetail")
                        .WithMany()
                        .HasForeignKey("TitikLokasiDetailID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.UserBank", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Billboard360.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.UserRole", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Billboard360.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Billboard360.DataAccess.Entities.WishList", b =>
                {
                    b.HasOne("Billboard360.DataAccess.Entities.TitikLokasiDetail", "SiteItem")
                        .WithMany()
                        .HasForeignKey("SiteItemID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Billboard360.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
